/*
 * Nnef_EventExposure
 *
 * NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DispersionCollection : Contains the dispersion information collected for an AF.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DispersionCollection {
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    #[serde(rename = "gpsi", skip_serializing_if = "Option::is_none")]
    pub gpsi: Option<String>,
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
    #[serde(rename = "supi", skip_serializing_if = "Option::is_none")]
    pub supi: Option<String>,
    #[serde(rename = "ueAddr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ue_addr: Option<Option<Box<crate::models::IpAddr>>>,
    #[serde(rename = "dataUsage")]
    pub data_usage: Box<crate::models::UsageThreshold>,
    /// Defines a packet filter of an IP flow.
    #[serde(rename = "flowDesp", skip_serializing_if = "Option::is_none")]
    pub flow_desp: Option<String>,
    /// String providing an application identifier.
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
    #[serde(rename = "dnais", skip_serializing_if = "Option::is_none")]
    pub dnais: Option<Vec<String>>,
    /// indicating a time in seconds.
    #[serde(rename = "appDur", skip_serializing_if = "Option::is_none")]
    pub app_dur: Option<i32>,
}

impl DispersionCollection {
    /// Contains the dispersion information collected for an AF.
    pub fn new(data_usage: crate::models::UsageThreshold) -> DispersionCollection {
        DispersionCollection {
            gpsi: None,
            supi: None,
            ue_addr: None,
            data_usage: Box::new(data_usage),
            flow_desp: None,
            app_id: None,
            dnais: None,
            app_dur: None,
        }
    }
}


