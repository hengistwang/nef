/*
 * Nnef_EventExposure
 *
 * NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ReportingInformation : Represents the type of reporting that the subscription requires.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportingInformation {
    #[serde(rename = "immRep", skip_serializing_if = "Option::is_none")]
    pub imm_rep: Option<bool>,
    #[serde(rename = "notifMethod", skip_serializing_if = "Option::is_none")]
    pub notif_method: Option<Box<crate::models::NotificationMethod>>,
    /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    #[serde(rename = "maxReportNbr", skip_serializing_if = "Option::is_none")]
    pub max_report_nbr: Option<i32>,
    /// string with format 'date-time' as defined in OpenAPI.
    #[serde(rename = "monDur", skip_serializing_if = "Option::is_none")]
    pub mon_dur: Option<String>,
    /// indicating a time in seconds.
    #[serde(rename = "repPeriod", skip_serializing_if = "Option::is_none")]
    pub rep_period: Option<i32>,
    /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
    #[serde(rename = "sampRatio", skip_serializing_if = "Option::is_none")]
    pub samp_ratio: Option<i32>,
    /// Criteria for partitioning the UEs before applying the sampling ratio.
    #[serde(rename = "partitionCriteria", skip_serializing_if = "Option::is_none")]
    pub partition_criteria: Option<Vec<crate::models::PartitioningCriteria>>,
    /// indicating a time in seconds.
    #[serde(rename = "grpRepTime", skip_serializing_if = "Option::is_none")]
    pub grp_rep_time: Option<i32>,
    #[serde(rename = "notifFlag", skip_serializing_if = "Option::is_none")]
    pub notif_flag: Option<Box<crate::models::NotificationFlag>>,
}

impl ReportingInformation {
    /// Represents the type of reporting that the subscription requires.
    pub fn new() -> ReportingInformation {
        ReportingInformation {
            imm_rep: None,
            notif_method: None,
            max_report_nbr: None,
            mon_dur: None,
            rep_period: None,
            samp_ratio: None,
            partition_criteria: None,
            grp_rep_time: None,
            notif_flag: None,
        }
    }
}


