/*
 * Nnef_EventExposure
 *
 * NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NefEventNotification : Represents information related to an event to be reported.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NefEventNotification {
    #[serde(rename = "event")]
    pub event: Box<crate::models::NefEvent>,
    /// string with format 'date-time' as defined in OpenAPI.
    #[serde(rename = "timeStamp")]
    pub time_stamp: String,
    #[serde(rename = "svcExprcInfos", skip_serializing_if = "Option::is_none")]
    pub svc_exprc_infos: Option<Vec<crate::models::ServiceExperienceInfo>>,
    #[serde(rename = "ueMobilityInfos", skip_serializing_if = "Option::is_none")]
    pub ue_mobility_infos: Option<Vec<crate::models::UeMobilityInfo>>,
    #[serde(rename = "ueCommInfos", skip_serializing_if = "Option::is_none")]
    pub ue_comm_infos: Option<Vec<crate::models::UeCommunicationInfo>>,
    #[serde(rename = "excepInfos", skip_serializing_if = "Option::is_none")]
    pub excep_infos: Option<Vec<crate::models::ExceptionInfo>>,
    #[serde(rename = "congestionInfos", skip_serializing_if = "Option::is_none")]
    pub congestion_infos: Option<Vec<crate::models::UserDataCongestionCollection>>,
    #[serde(rename = "perfDataInfos", skip_serializing_if = "Option::is_none")]
    pub perf_data_infos: Option<Vec<crate::models::PerformanceDataInfo>>,
    #[serde(rename = "dispersionInfos", skip_serializing_if = "Option::is_none")]
    pub dispersion_infos: Option<Vec<crate::models::DispersionCollection>>,
    #[serde(rename = "collBhvrInfs", skip_serializing_if = "Option::is_none")]
    pub coll_bhvr_infs: Option<Vec<crate::models::CollectiveBehaviourInfo>>,
    #[serde(rename = "msQoeMetrInfos", skip_serializing_if = "Option::is_none")]
    pub ms_qoe_metr_infos: Option<Vec<crate::models::MsQoeMetricsCollection>>,
    #[serde(rename = "msConsumpInfos", skip_serializing_if = "Option::is_none")]
    pub ms_consump_infos: Option<Vec<crate::models::MsConsumptionCollection>>,
    #[serde(rename = "msNetAssInvInfos", skip_serializing_if = "Option::is_none")]
    pub ms_net_ass_inv_infos: Option<Vec<crate::models::MsNetAssInvocationCollection>>,
    #[serde(rename = "msDynPlyInvInfos", skip_serializing_if = "Option::is_none")]
    pub ms_dyn_ply_inv_infos: Option<Vec<crate::models::MsDynPolicyInvocationCollection>>,
    #[serde(rename = "msAccActInfos", skip_serializing_if = "Option::is_none")]
    pub ms_acc_act_infos: Option<Vec<crate::models::MsAccessActivityCollection>>,
}

impl NefEventNotification {
    /// Represents information related to an event to be reported.
    pub fn new(event: crate::models::NefEvent, time_stamp: String) -> NefEventNotification {
        NefEventNotification {
            event: Box::new(event),
            time_stamp,
            svc_exprc_infos: None,
            ue_mobility_infos: None,
            ue_comm_infos: None,
            excep_infos: None,
            congestion_infos: None,
            perf_data_infos: None,
            dispersion_infos: None,
            coll_bhvr_infs: None,
            ms_qoe_metr_infos: None,
            ms_consump_infos: None,
            ms_net_ass_inv_infos: None,
            ms_dyn_ply_inv_infos: None,
            ms_acc_act_infos: None,
        }
    }
}


