/*
 * Nnef_EventExposure
 *
 * NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaStreamingAccessRecord {
    /// string with format 'date-time' as defined in OpenAPI.
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "mediaStreamHandlerEndpointAddress")]
    pub media_stream_handler_endpoint_address: Box<crate::models::EndpointAddress>,
    #[serde(rename = "applicationServerEndpointAddress")]
    pub application_server_endpoint_address: Box<crate::models::EndpointAddress>,
    #[serde(rename = "sessionIdentifier", skip_serializing_if = "Option::is_none")]
    pub session_identifier: Option<String>,
    #[serde(rename = "requestMessage")]
    pub request_message: Box<crate::models::MediaStreamingAccessRecordAllOfRequestMessage>,
    #[serde(rename = "cacheStatus", skip_serializing_if = "Option::is_none")]
    pub cache_status: Option<Box<crate::models::CacheStatus>>,
    #[serde(rename = "responseMessage")]
    pub response_message: Box<crate::models::MediaStreamingAccessRecordAllOfResponseMessage>,
    /// string with format 'float' as defined in OpenAPI.
    #[serde(rename = "processingLatency")]
    pub processing_latency: f32,
    #[serde(rename = "connectionMetrics", skip_serializing_if = "Option::is_none")]
    pub connection_metrics: Option<Box<crate::models::MediaStreamingAccessRecordAllOfConnectionMetrics>>,
}

impl MediaStreamingAccessRecord {
    pub fn new(timestamp: String, media_stream_handler_endpoint_address: crate::models::EndpointAddress, application_server_endpoint_address: crate::models::EndpointAddress, request_message: crate::models::MediaStreamingAccessRecordAllOfRequestMessage, response_message: crate::models::MediaStreamingAccessRecordAllOfResponseMessage, processing_latency: f32) -> MediaStreamingAccessRecord {
        MediaStreamingAccessRecord {
            timestamp,
            media_stream_handler_endpoint_address: Box::new(media_stream_handler_endpoint_address),
            application_server_endpoint_address: Box::new(application_server_endpoint_address),
            session_identifier: None,
            request_message: Box::new(request_message),
            cache_status: None,
            response_message: Box::new(response_message),
            processing_latency,
            connection_metrics: None,
        }
    }
}


