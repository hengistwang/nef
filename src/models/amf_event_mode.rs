/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AmfEventMode : Describes how the reports shall be generated by a subscribed event



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AmfEventMode {
    #[serde(rename = "trigger")]
    pub trigger: Box<crate::models::AmfEventTrigger>,
    #[serde(rename = "maxReports", skip_serializing_if = "Option::is_none")]
    pub max_reports: Option<i32>,
    /// string with format 'date-time' as defined in OpenAPI.
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,
    /// indicating a time in seconds.
    #[serde(rename = "repPeriod", skip_serializing_if = "Option::is_none")]
    pub rep_period: Option<i32>,
    /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
    #[serde(rename = "sampRatio", skip_serializing_if = "Option::is_none")]
    pub samp_ratio: Option<i32>,
    #[serde(rename = "partitioningCriteria", skip_serializing_if = "Option::is_none")]
    pub partitioning_criteria: Option<Vec<crate::models::PartitioningCriteria>>,
    #[serde(rename = "notifFlag", skip_serializing_if = "Option::is_none")]
    pub notif_flag: Option<Box<crate::models::NotificationFlag>>,
}

impl AmfEventMode {
    /// Describes how the reports shall be generated by a subscribed event
    pub fn new(trigger: crate::models::AmfEventTrigger) -> AmfEventMode {
        AmfEventMode {
            trigger: Box::new(trigger),
            max_reports: None,
            expiry: None,
            rep_period: None,
            samp_ratio: None,
            partitioning_criteria: None,
            notif_flag: None,
        }
    }
}


